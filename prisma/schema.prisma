// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// npx prisma migrate dev --name add-title-to-note

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  refreshToken String?
  createdAt    DateTime   @default(now())
  profile      Profile?
  Post         Post[]
  likes        PostLike[]
  Comment      Comment[]
}

model Profile {
  id          Int       @id @default(autoincrement())
  nickname    String?
  firstName   String
  lastName    String?
  dob         DateTime?
  location    String?
  bio         String?
  publicEmail String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id            Int         @id @default(autoincrement())
  content       String      @db.Text
  title         String
  subCategoryId Int
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  images        Image[] // Relation to Images table
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  view          Int         @default(0)
  likeCount     Int         @default(0)
  likes         PostLike[]
  commentCount  Int         @default(0)
  Comments      Comment[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String // S3 URL
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  subCategories SubCategory[]
}

model SubCategory {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  categoryId Int
  Posts      Post[]
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model PostLike {
  id     Int    @id @default(autoincrement())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([postId, userId]) // Ensures a user can only like a post once
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}
